name: Deploy-Website
run-name: Deployment initiated by ${{github.actor}}

on:
  workflow_dispatch:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  deploy-apptware-hackathon:
    name: Deploy Apptware Hackathon Website

    runs-on: ubuntu-latest

    steps:
      - name: Pulling code from main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - name: Building node Application
        env:
          CI: ${{ secrets.CI}}
        run: |
          npm i
          npm run build
          ls -l build

      - name: configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE}}
          role-session-name: github-action-access
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Checking Server State
        id: status
        run: |
          INSTANCE_STATE=$(aws ec2 describe-instances --region ${{ secrets.AWS_REGION }} --instance-ids ${{ secrets.INSTANCE_ID }} --query Reservations[].Instances[].State[].Name --output text)
          echo "INSTANCE_STATE_UPDATE=$INSTANCE_STATE" >> "$GITHUB_OUTPUT"
          echo "Instance is $INSTANCE_STATE"

      - name: Get runner IP
        id: ip
        uses: candidob/get-runner-ip@v1.0.0
        if: ${{ steps.status.outputs.INSTANCE_STATE_UPDATE == 'running'}}

      - name: whitelist runner ip address
        if: ${{ steps.status.outputs.INSTANCE_STATE_UPDATE == 'running'}}
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SG }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32

      - name: Copy Files to Server
        uses: easingthemes/ssh-deploy@main
        if: ${{ steps.status.outputs.INSTANCE_STATE_UPDATE == 'running'}}
        with:
          REMOTE_HOST: ${{ secrets.SERVER_IP}}
          REMOTE_USER: ${{ secrets.SERVER_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
          SOURCE: 'build/*'
          TARGET: /home/ubuntu/hackathon/

      - name: Starting Application
        id: deploy
        uses: appleboy/ssh-action@v1.2.0
        if: ${{ steps.status.outputs.INSTANCE_STATE_UPDATE == 'running'}}
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRIVATE_KEY }} 
          script:  |
            sudo rm -rvf /var/wwww/html/hackathon/*
            sudo mv -rvf /home/ubuntu/hackathon/* /var/www/html/hackathon/
            sudo rm -rvf /home/ubuntu/hackathon/*
            sudo systemctl restart nginx

      - name: Revoke runner ip address
        if: ${{ steps.status.outputs.INSTANCE_STATE_UPDATE == 'running'}}
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SG }} \
            --protocol tcp \
            --port 22 \
            --cidr ${{ steps.ip.outputs.ipv4 }}/32